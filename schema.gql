scalar DateTime

type Query {
  video(id: ID!): Video!
  videos(input: GetVideosInput = { limit: 10, skip: 0 }): VideoCollection!

  tag(id: ID!): Tag!

  mylist(id: ID!): Mylist!

  searchVideos(
    query: String!
    limit: Int! = 10
    skip: Int! = 0
  ): SearchVideosResult!
  searchTags(
    query: String!
    limit: Int! = 10
    skip: Int! = 0
  ): SearchTagsResult!

  user(name: String!): User!
  whoami: User!

  niconicoSource(id: ID!): NiconicoSource!
  findNiconicoSource(id: ID!): NiconicoSource
}

type Mutation {
  refreshToken(token: String!): RefreshTokenPayload

  signin(input: SigninInput): SigninPayload!
  registerTag(input: RegisterTagInput!): RegisterTagPayload!
  registerVideo(input: RegisterVideoInput!): RegisterVideoPayload!

  tagVideo(input: TagVideoInput!): VideoAddTagHistoryItem!
  untagVideo(input: UntagVideoInput!): VideoDeleteTagHistoryItem!
}

type RefreshTokenPayload {
  accessToken: String!
  refreshToken: String!
}

input SigninInput {
  name: String!
  password: String!
}

type Video {
  id: ID!
  title: String!
  titles: [VideoTitle!]!
  thumbnailUrl: String!
  thumbnails: [VideoThumbnail!]!
  tags: [Tag!]!
  hasTag(id: ID!): Boolean!
  history(
    skip: Int! = 0
    limit: Int! = 10
    order: VideoHistoryOrder! = { createdAt: DESC }
  ): [VideoHistoryItem!]!
  registeredAt: DateTime!
}

input VideoHistoryOrder {
  createdAt: SortOrder
}

enum SortOrder {
  ASC
  DESC
}

type VideoTitle {
  title: String!
  primary: Boolean!
}

type VideoThumbnail {
  imageUrl: String!
  primary: Boolean!
}

interface VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
}

type VideoRegisterHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
}

type VideoAddTitleHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  title: String!
}

type VideoDeleteTitleHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  title: String!
}

type VideoChangePrimaryTitleHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  from: String
  to: String!
}

type VideoAddThumbnailHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  thumbnail: String!
}

type VideoDeleteThumbnailHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  thumbnail: String!
}

type VideoChangePrimaryThumbnailHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  from: String
  to: String!
}

type VideoAddTagHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  tag: Tag!
}

type VideoDeleteTagHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  tag: Tag!
}

type VideoAddNiconicoSourceHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  niconico: NiconicoSource!
}

input GetVideosInput {
  limit: Int
  skip: Int
}

type VideoCollection {
  nodes: [Video!]!
}

type Tag {
  id: ID!
  type: TagType! @deprecated
  name: String!
  names: [TagName!]!

  taggedVideos: [Video!]!
  history: [TagHistoryItem!]!

  explicitParent: Tag
  parents: [TagParent!]!
  meaningless: Boolean!
}

type TagName {
  name: String!
  primary: Boolean!
}

type TagParent {
  tag: Tag!
  explicit: Boolean!
}

enum TagType {
  COPYRIGHT
  MATERIAL
  MUSIC
  SERIES
  IMAGE
  TACTICS
  CLASS
  EVENT
}

interface TagHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
}

type TagRegisterHistoryItem implements TagHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  tag: Tag!
}

type TagAddNameHistoryItem implements TagHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  tag: Tag!
  name: String!
}

type TagDeleteNameHistoryItem implements TagHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  tag: Tag!
  name: String!
}

type TagChangePrimaryNameHistoryItem implements TagHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  tag: Tag!
  from: String
  to: String!
}

type SearchVideosResult {
  # count: Int!
  result: [SearchVideosResultItem!]!
}

type SearchVideosResultItem {
  matchedTitle: String!
  video: Video!
}

type SearchTagsResult {
  # count: Int!
  result: [SearchTagsResultItem!]!
}

type SearchTagsResultItem {
  matchedName: String!
  tag: Tag!
}

type User {
  id: ID!
  name: String!
  displayName: String!
  icon: String!

  favorites: Mylist!
  mylists(input: UserMylistsInput!): UserMylistsConnection!
}

input UserMylistsInput {
  limit: Int
  skip: Int
  order: UserMylistsInputOrder = { updatedAt: ASC }
  range: [MylistShareRange!] = [PUBLIC]
}

input UserMylistsInputOrder {
  updatedAt: SortOrder
}

type UserMylistsConnection {
  nodes: [Mylist!]!
}

type SigninPayload {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input RegisterTagInput {
  primaryName: String!
  extraNames: [String!]

  explicitParent: ID
  implicitParents: [ID!]
}

type RegisterTagPayload {
  tag: Tag!
}

input RegisterVideoInput {
  primaryTitle: String!
  extraTitles: [String!]
  tags: [ID!]!
  primaryThumbnail: String!
  niconico: [String!]
}

type RegisterVideoPayload {
  video: Video!
}

input TagVideoInput {
  videoId: ID!
  tagId: ID!
}

input UntagVideoInput {
  videoId: ID!
  tagId: ID!
}

type NiconicoSource {
  id: ID!
  video: Video
}

type Mylist {
  id: ID!
  title: String!
  holder: User!
  range: MylistShareRange!
  registeredVideos(
    input: MylistRegisteredVideosInput!
  ): MylistRegisteredVideoCollection!
  updatedAt: DateTime!
}

enum MylistShareRange {
  PUBLIC
  KNOW_LINK
  PRIVATE
}

type MylistRegisteredVideo {
  id: ID!
  video: Video!
  registeredAt: DateTime!
  notes: String
}

type MylistRegisteredVideoCollection {
  nodes: [MylistRegisteredVideo!]!
}

input MylistRegisteredVideosInput {
  limit: Int
  skip: Int
  order: MylistRegisteredVideosInputOrder = { registeredAt: ASC }
}

input MylistRegisteredVideosInputOrder {
  registeredAt: SortOrder
}
