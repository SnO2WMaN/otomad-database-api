type YoutubeVideoSource implements Node & VideoSource {
  id: ID!
  sourceId: String!
  video: Video!

  url: String!
  embedUrl: String!

  events(
    first: Int
    after: String

    last: Int
    before: String

    orderBy: YoutubeVideoSourceEventsOrderBy!
  ): YoutubeVideoSourceEventConnection!
}

input YoutubeVideoSourceEventsOrderBy {
  createdAt: SortOrder
}

type YoutubeVideoSourceEventConnection {
  nodes: [YoutubeVideoSourceEvent!]!
  edges: [YoutubeVideoSourceEventEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type YoutubeVideoSourceEventEdge {
  cursor: String!
  node: YoutubeVideoSourceEvent!
}

interface YoutubeVideoSourceEvent implements Node & Event {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  source: YoutubeVideoSource!
}

type YoutubeVideoSourceCreateEvent implements Node & Event & YoutubeVideoSourceEvent {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  source: YoutubeVideoSource!
}

type Query {
  findYoutubeVideoSource(input: FindYoutubeVideoSourceInput!): YoutubeVideoSource
  getYoutubeVideoSource(id: ID!): YoutubeVideoSource!
}

input FindYoutubeVideoSourceInput {
  sourceId: String
}

type Mutation {
  registerVideoFromYoutube(input: RegisterVideoFromYoutubeInput!): RegisterVideoFromYoutubePayload!
    @auth(scopes: ["create:video"])
}

input RegisterVideoFromYoutubeInput {
  primaryTitle: String!
  extraTitles: [String!]! = []

  primaryThumbnailUrl: String!

  tagIds: [ID!]!
  semitagNames: [String!]! = []

  sourceIds: [String!]!

  "解決するYoutubeRegistrationRequestのID"
  requestId: ID
}

union RegisterVideoFromYoutubePayload =
    MutationInvalidTagIdError
  | MutationTagNotFoundError
  | RegisterVideoFromYoutubeTagIdsDuplicatedError
  | RegisterVideoFromYoutubeSemitagNamesDuplicatedError
  | MutationYoutubeRegistrationRequestNotFoundError
  | MutationInvalidYoutubeRegistrationRequestIdError
  | MutationYoutubeRegistrationRequestAlreadyCheckedError
  | RegisterVideoFromYoutubeInvalidYoutubeSourceIdError
  | RegisterVideoFromYoutubeOtherErrorsFallback
  | RegisterVideoFromYoutubeSucceededPayload

"タグのIDが重複している"
type RegisterVideoFromYoutubeTagIdsDuplicatedError {
  tagId: String!
}

"仮タグの名前が重複している"
type RegisterVideoFromYoutubeSemitagNamesDuplicatedError {
  name: String!
}

"Youtubeの動画IDとして不正な場合のエラー"
type RegisterVideoFromYoutubeInvalidYoutubeSourceIdError {
  sourceID: String!
}

"その他のエラー"
type RegisterVideoFromYoutubeOtherErrorsFallback {
  message: RegisterVideoFromYoutubeFailedMessage!
}

enum RegisterVideoFromYoutubeFailedMessage {
  INTERNAL_SERVER_ERROR
}

"成功した場合"
type RegisterVideoFromYoutubeSucceededPayload {
  video: Video!
}
