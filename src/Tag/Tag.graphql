type Tag implements Node {
  id: ID!
  serial: Int!

  name: String!
  names(primary: Boolean): [TagName!]!

  explicitParent: Tag

  """
  動画に対してタグを付けることができるか
  """
  canTagTo(
    """
    動画のID
    """
    videoId: ID!
  ): Boolean!

  events(input: TagEventsInput!): TagEventsConnection!

  children(
    first: Int
    after: String

    last: Int
    before: String

    orderBy: TagChildrenOrderBy! = { createdAt: DESC }
  ): TagParentConnection!

  parents(
    first: Int
    after: String

    last: Int
    before: String

    orderBy: TagParentsOrderBy! = { createdAt: DESC }

    categoryTag: Boolean
  ): TagParentConnection!

  totalTaggedVideos: Int!

  taggedVideos(
    first: Int
    after: String

    last: Int
    before: String

    orderBy: TagTaggedVideosOrderBy! = { createdAt: DESC }
  ): VideoTagConnection!

  "offsetベースでタグ付けされた動画を取得する"
  taggedVideosByOffset(input: TaggedVideosByOffsetInput!): TagTaggedVideosByOffsetPayload!

  "このタグが帰属するAbstractGroup．ない場合または複数の場合は`null`を返す．"
  belongTo: AbstractGroup

  """
  このタグが帰属するAbstractGroupを全て取得する．
  常に1つであることが望ましいが，場合によっては複数または存在しないこともある．
  """
  allBelongTo: [AbstractGrouping!]!
}

input TaggedVideosByOffsetInput {
  offset: Int!
  take: Int!
  orderBy: TagTaggedVideosOrderBy! = { createdAt: DESC }
}

type TagTaggedVideosByOffsetPayload {
  nodes: [VideoTag!]!
  hasMore: Boolean!
  totalCount: Int!
}

input TagEventsInput {
  skip: Int! = 0
  limit: Int! = 10
}

input TagChildrenOrderBy {
  createdAt: SortOrder
}

input TagParentsOrderBy {
  createdAt: SortOrder
}

input TagTaggedVideosOrderBy {
  createdAt: SortOrder
}

interface TagEvent implements Node & Event {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  tag: Tag!
}

type TagEventsConnection {
  nodes: [TagEvent!]!
}

"Tagを追加した際に発生．（初回のみ）"
type TagRegisterEvent implements Node & Event & TagEvent {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  tag: Tag!
}

type TagName {
  id: ID!
  name: String!
  primary: Boolean!

  events(input: TagNameEventsInput!): TagNameEventConnection!
}

input TagNameEventsInput {
  skip: Int! = 0
  limit: Int
}

interface TagNameEvent implements Node & Event {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  tagName: TagName!
}

type TagNameEventConnection {
  nodes: [TagNameEvent!]!
}

type TagNameCreateEvent implements Node & Event & TagNameEvent {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  tagName: TagName!
}

type TagNameSetPrimaryEvent implements Node & Event & TagNameEvent {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  tagName: TagName!
}

type TagNameUnsetPrimaryEvent implements Node & Event & TagNameEvent {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  tagName: TagName!
}

type TagParent {
  id: ID!

  parent: Tag!
  child: Tag!

  explicit: Boolean!

  events(input: TagParentEventsInput!): TagParentEventConnection!
}

input TagParentEventsInput {
  skip: Int! = 0
  limit: Int
}

type TagParentConnection {
  nodes: [TagParent!]!
  edges: [TagParentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TagParentEdge {
  cursor: String!
  node: TagParent!
}

"TagParentのIDとして不正なIDを入力した場合のMutation用エラー"
type MutationInvalidTagParentIdError {
  relationId: String!
}

"TagParentが見つからない場合のMutation用エラー"
type MutationTagParentNotFoundError {
  relationId: String!
}

interface TagParentEvent implements Node & Event {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  tagParent: TagParent!
}

type TagParentEventConnection {
  nodes: [TagParentEvent!]!
}

type TagParentCreateEvent implements Node & Event & TagParentEvent {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  tagParent: TagParent!
}

type TagParentSetPrimaryEvent implements Node & Event & TagParentEvent {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  tagParent: TagParent!
}

type TagParentUnsetPrimaryEvent implements Node & Event & TagParentEvent {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  tagParent: TagParent!
}

type Query {
  getTag(id: ID!): Tag!
}

type Query {
  findTag(input: FindTagInput!): Tag @deprecated(reason: "Use `Query.findTagBySerial` instead.")
}

input FindTagInput {
  id: ID
  serial: Int
}
