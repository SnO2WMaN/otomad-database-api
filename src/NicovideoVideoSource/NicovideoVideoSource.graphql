type NicovideoVideoSource implements Node & VideoSource {
  id: ID!
  sourceId: String!
  video: Video!

  url: String!
  embedUrl: String!

  events(input: NicovideoVideoSourceEventsInput!): NicovideoVideoSourceEventConnection!
}

input NicovideoVideoSourceEventsInput {
  skip: Int! = 0
  limit: Int! = 10
}

interface NicovideoVideoSourceEvent implements Node & Event {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  source: NicovideoVideoSource!
}

type NicovideoVideoSourceEventConnection {
  nodes: [NicovideoVideoSourceEvent!]!
}

type NicovideoVideoSourceCreateEvent implements Node & Event & NicovideoVideoSourceEvent {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  source: NicovideoVideoSource!
}

type Query {
  getNicovideoVideoSource(id: ID!): NicovideoVideoSource!
  findNicovideoVideoSource(input: FindNicovideoVideoSourceInput!): NicovideoVideoSource
}

input FindNicovideoVideoSourceInput {
  sourceId: String
}

type Mutation {
  registerVideoFromNicovideo(input: RegisterVideoFromNicovideoInput!): RegisterVideoFromNicovideoPayload!
    @auth(scopes: ["create:video"])
}

input RegisterVideoFromNicovideoInput {
  primaryTitle: String!
  extraTitles: [String!]! = []

  primaryThumbnailUrl: String!

  tagIds: [ID!]!
  semitagNames: [String!]! = []

  sourceIds: [String!]!

  requestId: ID
}

union RegisterVideoFromNicovideoPayload =
    MutationInvalidTagIdError
  | MutationTagNotFoundError
  | RegisterVideoFromNicovideoTagIdsDuplicatedError
  | RegisterVideoFromNicovideoSemitagNamesDuplicatedError
  | MutationNicovideoRegistrationRequestNotFoundError
  | MutationInvalidNicovideoRegistrationRequestIdError
  | MutationNicovideoRegistrationRequestAlreadyCheckedError
  | RegisterVideoFromNicovideoInvalidNicovideoSourceIdError
  | RegisterVideoFromNicovideoSemitagTooLongError
  | RegisterVideoFromNicovideoSucceededPayload

"タグのIDが重複している"
type RegisterVideoFromNicovideoTagIdsDuplicatedError {
  tagId: String!
}

"仮タグの名前が重複している"
type RegisterVideoFromNicovideoSemitagNamesDuplicatedError {
  name: String!
}

"仮タグの名前が長過ぎる"
type RegisterVideoFromNicovideoSemitagTooLongError {
  name: String!
}

"ニコニコ動画のソースIDとして不正な場合のエラー"
type RegisterVideoFromNicovideoInvalidNicovideoSourceIdError {
  sourceID: String!
}

"成功した場合"
type RegisterVideoFromNicovideoSucceededPayload {
  video: Video!
}
