type Video implements Node {
  id: ID!
  serial: Int!

  title: String!
  titles: [VideoTitle!]!
  thumbnailUrl: String!
  thumbnails: [VideoThumbnail!]!
  tags(input: VideoTagsInput!): [Tag!]!
  hasTag(id: ID!): Boolean!
  history(input: VideoHistoryInput!): VideoHistoryConnection!
  events(input: VideoEventsInput!): VideoEventsConnection!
  registeredAt: DateTime!

  nicovideoSources: [NicovideoVideoSource!]!

  semitags(resolved: Boolean): [Semitag!]!

  similarVideos(input: VideoSimilarVideosInput!): VideoSimilarVideosPayload!
}

type VideoTitle {
  title: String!
  primary: Boolean!
}

type VideoThumbnail {
  imageUrl: String!
  primary: Boolean!
}

input VideoTagsInput {
  "未指定なら全てを取得する"
  limit: Int
  skip: Int! = 0
  order: VideoTagsInputOrder! = { updatedAt: DESC }
}

input VideoTagsInputOrder {
  createdAt: SortOrder
  updatedAt: SortOrder
}

# History

input VideoHistoryInput {
  skip: Int! = 0
  limit: Int! = 10
  order: VideoHistoryOrder! = { createdAt: DESC }
}

input VideoHistoryOrder {
  createdAt: SortOrder
}

type VideoHistoryConnection {
  nodes: [VideoHistoryItem!]!
}

interface VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
}

type VideoRegisterHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
}

type VideoAddTitleHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  title: String!
}

type VideoDeleteTitleHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  title: String!
}

type VideoChangePrimaryTitleHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  from: String
  to: String!
}

type VideoAddThumbnailHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  thumbnail: String!
}

type VideoDeleteThumbnailHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  thumbnail: String!
}

type VideoChangePrimaryThumbnailHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  from: String
  to: String!
}

type VideoAddTagHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  tag: Tag!
}

type VideoDeleteTagHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  tag: Tag!
}

type VideoAddNicovideoVideoSourceHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!

  source: NicovideoVideoSource!
}

input VideoSimilarVideosInput {
  limit: Int! = 10
}

type VideoSimilarVideosPayload {
  items: [VideoSimilarity!]!
}

type VideoConnection {
  nodes: [Video!]!
}

input VideoEventsInput {
  skip: Int! = 0
  limit: Int! = 10
  order: VideoEventsInputOrder! = { createdAt: DESC }
}

input VideoEventsInputOrder {
  createdAt: SortOrder
}
