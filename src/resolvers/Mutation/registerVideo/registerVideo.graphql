type Mutation {
  registerVideo(input: RegisterVideoInput!): RegisterVideoPayload! @deprecated
}

input RegisterVideoInput {
  primaryTitle: String!
  extraTitles: [String!]! = []
  tags: [ID!]!
  primaryThumbnail: String!
  sources: [RegisterVideoInputSource!]!
  semitags: [String!]! = []

  nicovideoRequestId: ID
}

enum RegisterVideoInputSourceType {
  NICOVIDEO
  # YOUTUBE
}

input RegisterVideoInputSource {
  type: RegisterVideoInputSourceType!
  sourceId: String!
}

union RegisterVideoPayload =
    RegisterVideoSucceededPayload
  | MutationInvalidNicovideoRegistrationRequestIdError
  | MutationNicovideoRegistrationRequestNotFoundError
  | MutationNicovideoRegistrationRequestAlreadyCheckedError
  | RegisterVideoFailedPayload

type RegisterVideoSucceededPayload {
  video: Video!
}

type RegisterVideoFailedPayload {
  message: RegisterVideoFailedMessage!
}

enum RegisterVideoFailedMessage {
  FORBIDDEN

  INVALID_NICOVIDEO_SOURCE_ID

  INVALID_TAG_ID

  UNKNOWN
}
