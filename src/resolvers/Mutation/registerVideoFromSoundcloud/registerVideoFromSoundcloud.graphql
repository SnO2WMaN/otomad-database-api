type Mutation {
  registerVideoFromSoundcloud(input: RegisterVideoFromSoundcloudInput!): RegisterVideoFromSoundcloudPayload!
    @auth(scopes: ["create:video"])
}

input RegisterVideoFromSoundcloudInput {
  primaryTitle: String!
  extraTitles: [String!]! = []

  primaryThumbnailUrl: String!

  tagIds: [ID!]!
  semitagNames: [String!]! = []

  sourceIds: [String!]!
}

union RegisterVideoFromSoundcloudPayload =
    MutationInvalidTagIdError
  | MutationTagNotFoundError
  | RegisterVideoFromSoundcloudTagIdsDuplicatedError
  | RegisterVideoFromSoundcloudSemitagNamesDuplicatedError # | MutationSoundcloudRegistrationRequestNotFoundError | MutationInvalidSoundcloudRegistrationRequestIdError | MutationSoundcloudRegistrationRequestAlreadyCheckedError
  | RegisterVideoFromSoundcloudInvalidSoundcloudSourceIdError
  | RegisterVideoFromSoundcloudOtherErrorsFallback
  | RegisterVideoFromSoundcloudSucceededPayload

"タグのIDが重複している"
type RegisterVideoFromSoundcloudTagIdsDuplicatedError {
  tagId: String!
}

"仮タグの名前が重複している"
type RegisterVideoFromSoundcloudSemitagNamesDuplicatedError {
  name: String!
}

"Soundcloudの動画IDとして不正な場合のエラー"
type RegisterVideoFromSoundcloudInvalidSoundcloudSourceIdError {
  sourceID: String!
}

"その他のエラー"
type RegisterVideoFromSoundcloudOtherErrorsFallback {
  message: RegisterVideoFromSoundcloudFailedMessage!
}

enum RegisterVideoFromSoundcloudFailedMessage {
  INTERNAL_SERVER_ERROR
}

"成功した場合"
type RegisterVideoFromSoundcloudSucceededPayload {
  video: Video!
}
