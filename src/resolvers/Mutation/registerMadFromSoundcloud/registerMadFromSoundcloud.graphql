type Mutation {
  registerMadFromSoundcloud(input: RegisterMadFromSoundcloudInput!): RegisterMadFromSoundcloudPayload!
    @auth(scopes: ["create:video"])
}

input RegisterMadFromSoundcloudInput {
  primaryTitle: String!
  extraTitles: [String!]! = []

  primaryThumbnailUrl: String!

  tagIds: [ID!]!
  semitagNames: [String!]! = []

  sourceIds: [String!]!
}

union RegisterMadFromSoundcloudPayload =
    MutationInvalidTagIdError
  | MutationTagNotFoundError
  | RegisterMadFromSoundcloudTagIdsDuplicatedError
  | RegisterMadFromSoundcloudSemitagNamesDuplicatedError
  | RegisterMadFromSoundcloudInvalidSoundcloudSourceIdError
  | RegisterMadFromSoundcloudSucceededPayload

"タグのIDが重複している"
type RegisterMadFromSoundcloudTagIdsDuplicatedError {
  tagId: String!
}

"仮タグの名前が重複している"
type RegisterMadFromSoundcloudSemitagNamesDuplicatedError {
  name: String!
}

"Soundcloudの動画IDとして不正な場合のエラー"
type RegisterMadFromSoundcloudInvalidSoundcloudSourceIdError {
  sourceID: String!
}

"成功した場合"
type RegisterMadFromSoundcloudSucceededPayload {
  mad: Video!
}
