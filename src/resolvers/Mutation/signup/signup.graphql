type Mutation {
  signup(input: SignupInput!): SignupPayload!
}

input SignupInput {
  name: String!
  displayName: String!
  email: String!
  password: String!
}

union SignupPayload =
    SignupNameAlreadyExistsError
  | SignupNameValidationError
  | SignupDisplayNameValidationError
  | SignupEmailAlreadyExistsError
  | SignupEmailValidationError
  | SignupPasswordValidationError
  | SignupOtherErrorsFallback
  | SignupSucceededPayload

type SignupNameAlreadyExistsError {
  name: String!
}

type SignupNameValidationError {
  name: String!
  enum: SignupNameValidationErrorEnum!
}

enum SignupNameValidationErrorEnum {
  "x文字以上になっていない"
  INSUFFICIENT_MIN_LENGTH

  "x文字以下になっていない"
  INSUFFICIENT_MAX_LENGTH

  "使用不可能な文字が含まれている"
  WRONG_CHARACTER
}

type SignupEmailAlreadyExistsError {
  email: String!
}

type SignupDisplayNameValidationError {
  displayName: String!
  enum: SignupDisplayValidationNameErrorEnum!
}

enum SignupDisplayValidationNameErrorEnum {
  "x文字以上になっていない"
  INSUFFICIENT_MIN_LENGTH

  "x文字以下になっていない"
  INSUFFICIENT_MAX_LENGTH
}

type SignupEmailValidationError {
  email: String!
  enum: SignupEmailValidationErrorEnum!
}

enum SignupEmailValidationErrorEnum {
  "メールアドレスの形式になっていない"
  INVALID_EMAIL_FORMAT
}

type SignupPasswordValidationError {
  enum: SignupPasswordValidationErrorEnum!
}

enum SignupPasswordValidationErrorEnum {
  "x文字以上になっていない"
  INSUFFICIENT_MIN_LENGTH
}

type SignupOtherErrorsFallback {
  enum: SignupOtherErrorsFallbackEnum!
}

enum SignupOtherErrorsFallbackEnum {
  INTERNAL_SERVER_ERROR
}

type SignupSucceededPayload {
  user: User!
}
