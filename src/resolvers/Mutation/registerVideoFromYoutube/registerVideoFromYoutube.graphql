type Mutation {
  registerVideoFromYoutube(input: RegisterVideoFromYoutubeInput!): RegisterVideoFromYoutubePayload!
}

input RegisterVideoFromYoutubeInput {
  primaryTitle: String!
  extraTitles: [String!]! = []

  primaryThumbnailUrl: String!

  tagIds: [ID!]!
  semitagNames: [String!]! = []

  sourceIds: [String!]!
}

union RegisterVideoFromYoutubePayload =
    MutationAuthenticationError
  | MutationInvalidTagIdError
  | MutationTagNotFoundError
  | RegisterVideoFromYoutubeTagIdsDuplicatedError
  | RegisterVideoFromYoutubeSemitagNamesDuplicatedError # | MutationYoutubeRegistrationRequestNotFoundError | MutationInvalidYoutubeRegistrationRequestIdError | MutationYoutubeRegistrationRequestAlreadyCheckedError
  | RegisterVideoFromYoutubeInvalidYoutubeSourceIdError
  | RegisterVideoFromYoutubeOtherErrorsFallback
  | RegisterVideoFromYoutubeSucceededPayload

"タグのIDが重複している"
type RegisterVideoFromYoutubeTagIdsDuplicatedError {
  tagId: String!
}

"仮タグの名前が重複している"
type RegisterVideoFromYoutubeSemitagNamesDuplicatedError {
  name: String!
}

"Youtubeの動画IDとして不正な場合のエラー"
type RegisterVideoFromYoutubeInvalidYoutubeSourceIdError {
  sourceID: String!
}

"その他のエラー"
type RegisterVideoFromYoutubeOtherErrorsFallback {
  message: RegisterVideoFromYoutubeFailedMessage!
}

enum RegisterVideoFromYoutubeFailedMessage {
  INTERNAL_SERVER_ERROR
}

"成功した場合"
type RegisterVideoFromYoutubeSucceededPayload {
  video: Video!
}
