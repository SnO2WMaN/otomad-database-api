type Mutation {
  registerTag(input: RegisterTagInput!): RegisterTagReturnUnion! @auth(scopes: ["create:tag"])
}

input RegisterTagInput {
  primaryName: String!
  extraNames: [String!]! = []

  explicitParent: ID
  implicitParents: [ID!]! = []

  resolveSemitags: [ID!]! = []
}

union RegisterTagReturnUnion =
    MutationInvalidTagIdError
  | MutationTagNotFoundError
  | MutationInvalidSemitagIdError
  | MutationSemitagNotFoundError
  | RegisterTagResolveSemitagIdsDuplicatedError
  | RegisterTagResolveSemitagAlreadyCheckedError
  | RegisterTagImplicitParentIdsDuplicatedError
  | RegisterTagTagIdCollidedBetweenExplicitAndImplicitError
  | RegisterTagOtherErrorsFallback
  | RegisterTagSucceededPayload

"明示的な親タグのIDと非明示的な親タグのIDが重複している"
type RegisterTagTagIdCollidedBetweenExplicitAndImplicitError {
  tagId: String!
}

"非明示的な親タグのIDが重複している"
type RegisterTagImplicitParentIdsDuplicatedError {
  tagId: String!
}

"解決されるSemitagのIDが重複している"
type RegisterTagResolveSemitagIdsDuplicatedError {
  semitagId: String!
}

"解決されるSemitagが既にチェック済みである"
type RegisterTagResolveSemitagAlreadyCheckedError {
  semitagId: String!
}

type RegisterTagOtherErrorsFallback {
  message: RegisterTagOtherErrorsFallbackMessage!
}

enum RegisterTagOtherErrorsFallbackMessage {
  UNKNOWN
}

type RegisterTagSucceededPayload {
  tag: Tag!
}
