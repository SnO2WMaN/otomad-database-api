type Mutation {
  registerTag(input: RegisterTagInput!): RegisterTagReturnUnion!
}

input RegisterTagInput {
  primaryName: String!
  extraNames: [String!]! = []

  explicitParent: ID
  implicitParents: [ID!]! = []

  resolveSemitags: [ID!]! = []
}

union RegisterTagReturnUnion =
    MutationAuthenticationError
  | MutationInvalidTagIdError
  | MutationTagNotFoundError
  | MutationInvalidSemitagIdError
  | MutationSemitagNotFoundError
  | RegisterTagResolveSemitagIdsDuplicatedError
  | RegisterTagResolveSemitagAlreadyCheckedError
  | RegisterTagImplicitParentIdsDuplicatedError
  | RegisterTagTagIdCollidedBetweenExplicitAndImplicitError
  | RegisterTagOtherErrorsFallback
  | RegisterTagSucceededPayload

type RegisterTagTagIdCollidedBetweenExplicitAndImplicitError {
  tagId: String!
}

type RegisterTagImplicitParentIdsDuplicatedError {
  tagId: String!
}

type RegisterTagResolveSemitagIdsDuplicatedError {
  semitagId: String!
}

type RegisterTagResolveSemitagAlreadyCheckedError {
  semitagId: String!
}

type RegisterTagOtherErrorsFallback {
  message: RegisterTagOtherErrorsFallbackMessage!
}

enum RegisterTagOtherErrorsFallbackMessage {
  UNKNOWN
}

type RegisterTagSucceededPayload {
  tag: Tag!
}
