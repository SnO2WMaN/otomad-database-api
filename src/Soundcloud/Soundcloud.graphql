type SoundcloudVideoSource implements Node & VideoSource {
  id: ID!
  sourceId: String!
  video: Video!

  url: String!
  embedUrl: String!

  events(
    first: Int
    after: String

    last: Int
    before: String

    orderBy: SoundcloudVideoSourceEventsOrderBy!
  ): SoundcloudVideoSourceEventConnection!
}

input SoundcloudVideoSourceEventsOrderBy {
  createdAt: SortOrder
}

type SoundcloudVideoSourceEventConnection {
  nodes: [SoundcloudVideoSourceEvent!]!
  edges: [SoundcloudVideoSourceEventEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SoundcloudVideoSourceEventEdge {
  cursor: String!
  node: SoundcloudVideoSourceEvent!
}

interface SoundcloudVideoSourceEvent implements Node & Event {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  source: SoundcloudVideoSource!
}

type SoundcloudVideoSourceCreateEvent implements Node & Event & SoundcloudVideoSourceEvent {
  id: ID!
  series: String!
  createdAt: DateTime!
  user: User!

  source: SoundcloudVideoSource!
}

type Query {
  getSoundcloudVideoSource(id: ID!): SoundcloudVideoSource!
}

type Mutation {
  registerMadFromSoundcloud(input: RegisterMadFromSoundcloudInput!): RegisterMadFromSoundcloudPayload!
    @auth(scopes: ["create:video"])
}

input RegisterMadFromSoundcloudInput {
  primaryTitle: String!
  extraTitles: [String!]! = []

  primaryThumbnailUrl: String!

  tagIds: [ID!]!
  semitagNames: [String!]! = []

  sourceIds: [String!]!
}

union RegisterMadFromSoundcloudPayload =
    MutationInvalidTagIdError
  | MutationTagNotFoundError
  | RegisterMadFromSoundcloudTagIdsDuplicatedError
  | RegisterMadFromSoundcloudSemitagNamesDuplicatedError
  | RegisterMadFromSoundcloudInvalidSoundcloudSourceIdError
  | RegisterMadFromSoundcloudSucceededPayload

"タグのIDが重複している"
type RegisterMadFromSoundcloudTagIdsDuplicatedError {
  tagId: String!
}

"仮タグの名前が重複している"
type RegisterMadFromSoundcloudSemitagNamesDuplicatedError {
  name: String!
}

"Soundcloudの動画IDとして不正な場合のエラー"
type RegisterMadFromSoundcloudInvalidSoundcloudSourceIdError {
  sourceID: String!
}

"成功した場合"
type RegisterMadFromSoundcloudSucceededPayload {
  mad: Video!
}
