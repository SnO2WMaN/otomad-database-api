generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model MylistGroup {
  id String @id @default(cuid())

  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  holderId String
  holder   User   @relation(fields: [holderId], references: [id])

  mylists MylistGroupMylistInclsion[]

  @@map("mylist_groups")
}

model MylistGroupMylistInclsion {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  mylistId String
  mylist   Mylist @relation(fields: [mylistId], references: [id])

  groupId String
  group   MylistGroup @relation(fields: [groupId], references: [id])

  @@unique([mylistId, groupId])
  @@map("mylist_group_mylist_inclusions")
}

model Mylist {
  id String @id @default(cuid())

  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  shareRange MylistShareRange

  isLikeList Boolean

  holderId String
  holder   User   @relation(fields: [holderId], references: [id])

  mylist_registrations MylistRegistration[]

  includedGroups MylistGroupMylistInclsion[]

  @@map("mylists")
}

enum MylistShareRange {
  PUBLIC
  KNOW_LINK
  PRIVATE

  @@map("mylists_range_enum")
}

model MylistRegistration {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  note String?

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  mylistId String
  mylist   Mylist @relation(fields: [mylistId], references: [id])

  @@unique([mylistId, videoId])
  @@map("mylist_registrations")
}

model NicovideoVideoSource {
  id String @id @default(cuid())

  sourceId String @unique @db.Citext

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  @@unique([sourceId, videoId])
  @@map("nicovideo_video_sources")
}

model Semitag {
  id String @id @default(cuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  isResolved Boolean @default(false) @map("resolved")
  tagId      String?
  tag        Tag?    @relation(fields: [tagId], references: [id])

  @@map("semitags")
}

model Session {
  id String @id @default(cuid())

  secret String @db.VarChar(64)

  expiredAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model TagName {
  id String @id @default(cuid())

  name String

  isPrimary Boolean @default(false) @map("primary")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id])

  @@map("tag_names")
}

model TagParent {
  id String @id @default(cuid())

  isExplicit Boolean @default(false) @map("explicit")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  childId String
  child   Tag    @relation("tag_parents_childIdTotags", fields: [childId], references: [id])

  parentId String
  parent   Tag    @relation("tag_parents_parentIdTotags", fields: [parentId], references: [id])

  @@unique([parentId, childId])
  @@map("tag_parents")
}

model Tag {
  id String @id @default(cuid())

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  meaningless Boolean   @default(false)
  semitags    Semitag[]

  names TagName[]

  parents  TagParent[] @relation("tag_parents_childIdTotags")
  children TagParent[] @relation("tag_parents_parentIdTotags")

  videos VideoTag[]

  @@map("tags")
}

model User {
  id   String @id @default(cuid())
  name String @unique @db.Citext

  email            String  @unique()
  isEmailConfirmed Boolean @default(false) @map("emailConfirmed")

  role UserRole @default(NORMAL)

  displayName String

  icon String?

  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  mylists Mylist[]

  mylistGroups MylistGroup[]

  sessions Session[]

  @@map("users")
}

enum UserRole {
  NORMAL
  EDITOR
  ADMINISTRATOR

  @@map("users_role_enum")
}

model VideoTag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id])

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  @@unique([tagId, videoId])
  @@map("video_tags")
}

model VideoThumbnail {
  id String @id @default(cuid())

  imageUrl  String
  isPrimary Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  @@map("video_thumbnails")
}

model VideoTitle {
  id String @id @default(cuid())

  title     String
  isPrimary Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  @@map("video_titles")
}

model Video {
  id     String @id @default(cuid())
  serial Int    @unique @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  titles     VideoTitle[]
  thumbnails VideoThumbnail[]

  tags     VideoTag[]
  semitags Semitag[]

  nicovideoSources NicovideoVideoSource[]

  mylists MylistRegistration[]

  @@map("videos")
}
