generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  extensions = [citext]

  url               = env("PRISMA_DATABASE_URL")
  shadowDatabaseUrl = env("PRISMA_SHADOW_DATABASE_URL")
}

model Mylist {
  id String @id @default(cuid())

  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  shareRange MylistShareRange @default(PRIVATE)

  isLikeList Boolean @default(false)

  holderId String
  holder   User   @relation(fields: [holderId], references: [id])

  registrations MylistRegistration[]

  includedGroups MylistGroupMylistInclsion[]

  events MylistEvent[]
}

enum MylistShareRange {
  PUBLIC
  KNOW_LINK
  PRIVATE
}

model MylistEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  mylist   Mylist @relation(fields: [mylistId], references: [id])
  mylistId String

  type    MylistEventType
  payload Json
}

enum MylistEventType {
  CREATE
}

model MylistRegistration {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  note String?

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  mylistId String
  mylist   Mylist @relation(fields: [mylistId], references: [id])

  isRemoved Boolean @default(false)

  events MylistRegistrationEvent[]

  @@unique([mylistId, videoId])
}

model MylistRegistrationEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  mylist               MylistRegistration @relation(fields: [mylistRegistrationId], references: [id])
  mylistRegistrationId String

  type    MylistRegistrationEventType
  payload Json
}

enum MylistRegistrationEventType {
  REGISTER

  UNREGISTER
  REREGISTER
}

model MylistGroup {
  id String @id @default(cuid())

  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  holderId String
  holder   User   @relation(fields: [holderId], references: [id])

  mylists MylistGroupMylistInclsion[]

  events MylistGroupEvent[]
}

model MylistGroupEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  group   MylistGroup @relation(fields: [groupId], references: [id])
  groupId String

  type    MylistGroupEventType
  payload Json
}

enum MylistGroupEventType {
  CREATE
}

model MylistGroupMylistInclsion {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  mylistId String
  mylist   Mylist @relation(fields: [mylistId], references: [id])

  groupId String
  group   MylistGroup @relation(fields: [groupId], references: [id])

  isRemoved Boolean @default(false)

  events MylistGroupMylistInclsionEvent[]

  @@unique([mylistId, groupId])
}

model MylistGroupMylistInclsionEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  inclusion   MylistGroupMylistInclsion @relation(fields: [inclusionId], references: [id])
  inclusionId String

  type    MylistGroupMylistInclsionEventType
  payload Json
}

enum MylistGroupMylistInclsionEventType {
  INCLUDE

  EXCLUDE
  REINCLUDE
}

model Session {
  id String @id @default(cuid())

  secret String @db.VarChar(64)

  expiredAt DateTime
  isExpired Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Tag {
  id     String @id
  serial Int    @unique @default(autoincrement())

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  meaningless Boolean

  names TagName[]

  parents  TagParent[] @relation("tag_parents_childIdTotags")
  children TagParent[] @relation("tag_parents_parentIdTotags")

  videos VideoTag[]

  events TagEvent[]
}

model TagEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  type    TagEventType
  payload Json
}

enum TagEventType {
  CREATE
}

model TagName {
  id String @id @default(cuid())

  name String

  isPrimary Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id])

  events TagNameEvent[]

  @@unique([name, tagId])
}

model TagNameEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tagName   TagName @relation(fields: [tagNameId], references: [id])
  tagNameId String

  type    TagNameEventType
  payload Json
}

enum TagNameEventType {
  CREATE

  SET_PRIMARY
  UNSET_PRIMARY
}

model TagParent {
  id String @id @default(cuid())

  isExplicit Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  childId String
  child   Tag    @relation("tag_parents_childIdTotags", fields: [childId], references: [id])

  parentId String
  parent   Tag    @relation("tag_parents_parentIdTotags", fields: [parentId], references: [id])

  events TagParentEvent[]

  @@unique([parentId, childId])
}

model TagParentEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tagParent   TagParent @relation(fields: [tagParentId], references: [id])
  tagParentId String

  type    TagParentEventType
  payload Json
}

enum TagParentEventType {
  CREATE

  SET_PRIMARY
  UNSET_PRIMARY
}

model User {
  id   String @id @default(cuid())
  name String @unique @db.Citext

  email            String  @unique()
  isEmailConfirmed Boolean @default(false)

  role UserRole @default(NORMAL)

  displayName String

  icon String?

  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  mylists Mylist[]

  mylistGroups MylistGroup[]

  sessions Session[]

  eventTag        TagEvent[]
  eventsTagName   TagNameEvent[]
  eventsTagParent TagParentEvent[]

  eventsVideo           VideoEvent[]
  eventsVideoTag        VideoTagEvent[]
  eventsVideoTitle      VideoTitleEvent[]
  eventsVideoThumbnail  VideoThumbnailEvent[]
  eventsNicovideoSource NicovideoVideoSourceEvent[]
  eventsSemitag         SemitagEvent[]

  eventsMylist                   MylistEvent[]
  eventMylistRegistration        MylistRegistrationEvent[]
  eventMylistGroup               MylistGroupEvent[]
  eventMylistGroupMylistInclsion MylistGroupMylistInclsionEvent[]
}

enum UserRole {
  NORMAL
  EDITOR
  ADMINISTRATOR
}

model Video {
  id     String @id
  serial Int    @unique @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  titles     VideoTitle[]
  thumbnails VideoThumbnail[]

  tags     VideoTag[]
  semitags Semitag[]

  nicovideoSources NicovideoVideoSource[]

  mylists MylistRegistration[]

  events VideoEvent[]
}

model VideoEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  type    VideoEventType
  payload Json
}

enum VideoEventType {
  REGISTER
}

model VideoTitle {
  id String @id @default(cuid())

  title     String
  isPrimary Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  events VideoTitleEvent[]

  @@unique([videoId, title])
}

model VideoTitleEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  videoTitle   VideoTitle @relation(fields: [videoTitleId], references: [id])
  videoTitleId String

  type    VideoTitleEventType
  payload Json
}

enum VideoTitleEventType {
  CREATE

  SET_PRIMARY
  UNSET_PRIMARY
}

model VideoThumbnail {
  id String @id @default(cuid())

  imageUrl  String
  isPrimary Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  events VideoThumbnailEvent[]
}

model VideoThumbnailEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  videoThumbnail   VideoThumbnail @relation(fields: [videoThumbnailId], references: [id])
  videoThumbnailId String

  type    VideoThumbnailEventType
  payload Json
}

enum VideoThumbnailEventType {
  CREATE

  SET_PRIMARY
  UNSET_PRIMARY
}

model VideoTag {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id])

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  isRemoved Boolean @default(false)

  events VideoTagEvent[]

  semitags Semitag[]

  @@unique([videoId, tagId])
}

model VideoTagEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  videoTag   VideoTag @relation(fields: [videoTagId], references: [id])
  videoTagId String

  type    VideoTagEventType
  payload Json
}

enum VideoTagEventType {
  ATTACH

  DETACH
  REATTACH
}

model Semitag {
  id String @id @default(cuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  isChecked Boolean

  videoTag   VideoTag? @relation(fields: [videoTagId], references: [id])
  videoTagId String?

  events SemitagEvent[]
}

model SemitagEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  semitag   Semitag @relation(fields: [semitagId], references: [id])
  semitagId String

  type    SemitagEventType
  payload Json
}

enum SemitagEventType {
  ATTACH

  RESOLVE
  REJECT
}

model NicovideoVideoSource {
  id String @id @default(cuid())

  sourceId String @unique @db.Citext

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  events NicovideoVideoSourceEvent[]

  @@unique([sourceId, videoId])
}

model NicovideoVideoSourceEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  source   NicovideoVideoSource @relation(fields: [sourceId], references: [id])
  sourceId String

  type    NicovideoVideoSourceEventType
  payload Json
}

enum NicovideoVideoSourceEventType {
  CREATE
}
