generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  extensions = [citext]

  url               = env("PRISMA_DATABASE_URL")
  shadowDatabaseUrl = env("PRISMA_SHADOW_DATABASE_URL")
}

model Mylist {
  id   String @id @default(cuid())
  slug String @db.Citext()

  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  shareRange MylistShareRange @default(PRIVATE)

  holderId String
  holder   User   @relation(fields: [holderId], references: [id])

  registrations MylistRegistration[]

  includedGroups MylistGroupMylistInclsion[]

  events MylistEvent[]

  @@unique([holderId, slug])
}

enum MylistShareRange {
  PUBLIC
  KNOW_LINK
  PRIVATE
}

model MylistEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  mylist   Mylist @relation(fields: [mylistId], references: [id])
  mylistId String

  type    MylistEventType
  payload Json
}

enum MylistEventType {
  CREATE
}

model MylistRegistration {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  note String?

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  mylistId String
  mylist   Mylist @relation(fields: [mylistId], references: [id])

  isRemoved Boolean @default(false)

  events MylistRegistrationEvent[]

  @@unique([mylistId, videoId])
}

model MylistRegistrationEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  mylist               MylistRegistration @relation(fields: [mylistRegistrationId], references: [id])
  mylistRegistrationId String

  type    MylistRegistrationEventType
  payload Json
}

enum MylistRegistrationEventType {
  REGISTER

  UNREGISTER
  REREGISTER
}

model MylistGroup {
  id String @id @default(cuid())

  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  holderId String
  holder   User   @relation(fields: [holderId], references: [id])

  mylists MylistGroupMylistInclsion[]

  events MylistGroupEvent[]
}

model MylistGroupEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  group   MylistGroup @relation(fields: [groupId], references: [id])
  groupId String

  type    MylistGroupEventType
  payload Json
}

enum MylistGroupEventType {
  CREATE
}

model MylistGroupMylistInclsion {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  mylistId String
  mylist   Mylist @relation(fields: [mylistId], references: [id])

  groupId String
  group   MylistGroup @relation(fields: [groupId], references: [id])

  isRemoved Boolean @default(false)

  events MylistGroupMylistInclsionEvent[]

  @@unique([mylistId, groupId])
}

model MylistGroupMylistInclsionEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  inclusion   MylistGroupMylistInclsion @relation(fields: [inclusionId], references: [id])
  inclusionId String

  type    MylistGroupMylistInclsionEventType
  payload Json
}

enum MylistGroupMylistInclsionEventType {
  INCLUDE

  EXCLUDE
  REINCLUDE
}

model Tag {
  id     String @id @default(cuid())
  serial Int    @unique @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  isCategoryTag Boolean            @map("meaningless")
  categoryType  CategoryTagTyping?

  names TagName[]

  parents  TagParent[] @relation("tag_parents_childIdTotags")
  children TagParent[] @relation("tag_parents_parentIdTotags")

  videos VideoTag[]

  events TagEvent[]

  NicovideoSubmitRequestTagging NicovideoRegistrationRequestTagging[]
}

model CategoryTagTyping {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String @unique

  type CategoryTagType @unique
}

enum CategoryTagType {
  CHARACTER
  CLASS
  COPYRIGHT
  EVENT
  MUSIC
  PHRASE
  SERIES
  STYLE
  TACTICS
}

model TagEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  type    TagEventType
  payload Json
}

enum TagEventType {
  REGISTER @map("CREATE")
}

model TagName {
  id String @id

  name String

  isPrimary Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id])

  events TagNameEvent[]

  @@unique([name, tagId])
}

model TagNameEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tagName   TagName @relation(fields: [tagNameId], references: [id])
  tagNameId String

  type    TagNameEventType
  payload Json
}

enum TagNameEventType {
  CREATE

  SET_PRIMARY
  UNSET_PRIMARY
}

model TagParent {
  id String @id

  isExplicit Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  childId String
  child   Tag    @relation("tag_parents_childIdTotags", fields: [childId], references: [id])

  parentId String
  parent   Tag    @relation("tag_parents_parentIdTotags", fields: [parentId], references: [id])

  events TagParentEvent[]

  @@unique([parentId, childId])
}

model TagParentEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tagParent   TagParent @relation(fields: [tagParentId], references: [id])
  tagParentId String

  type    TagParentEventType
  payload Json
}

enum TagParentEventType {
  CREATE

  SET_PRIMARY
  UNSET_PRIMARY
}

model User {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  notifications Notification[]

  mylists      Mylist[]
  mylistGroups MylistGroup[]

  MylistEvent                          MylistEvent[]
  MylistRegistrationEvent              MylistRegistrationEvent[]
  MylistGroupEvent                     MylistGroupEvent[]
  MylistGroupMylistInclsionEvent       MylistGroupMylistInclsionEvent[]
  CategoryTagTyping                    CategoryTagTyping[]
  TagEvent                             TagEvent[]
  TagNameEvent                         TagNameEvent[]
  TagParentEvent                       TagParentEvent[]
  VideoEvent                           VideoEvent[]
  VideoTitleEvent                      VideoTitleEvent[]
  VideoThumbnailEvent                  VideoThumbnailEvent[]
  VideoTagEvent                        VideoTagEvent[]
  SemitagEvent                         SemitagEvent[]
  NicovideoVideoSourceEvent            NicovideoVideoSourceEvent[]
  NicovideoRegistrationRequest         NicovideoRegistrationRequest[]
  NicovideoRegistrationRequestChecking NicovideoRegistrationRequestChecking[]
  NicovideoRegistrationRequestEvent    NicovideoRegistrationRequestEvent[]
  YoutubeVideoSourceEvent              YoutubeVideoSourceEvent[]
}

model Video {
  id     String @id @default(cuid())
  serial Int    @unique @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  titles     VideoTitle[]
  thumbnails VideoThumbnail[]

  tags     VideoTag[]
  semitags Semitag[]

  nicovideoSources NicovideoVideoSource[]
  youtubeSources   YoutubeVideoSource[]

  mylists MylistRegistration[]

  events VideoEvent[]

  NicovideoRegistrationRequestCheckings NicovideoRegistrationRequestChecking[]
}

model VideoEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  type    VideoEventType
  payload Json
}

enum VideoEventType {
  REGISTER
}

model VideoTitle {
  id String @id

  title     String
  isPrimary Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  events VideoTitleEvent[]

  @@unique([videoId, title])
}

model VideoTitleEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  videoTitle   VideoTitle @relation(fields: [videoTitleId], references: [id])
  videoTitleId String

  type    VideoTitleEventType
  payload Json
}

enum VideoTitleEventType {
  CREATE

  SET_PRIMARY
  UNSET_PRIMARY
}

model VideoThumbnail {
  id String @id

  imageUrl  String
  isPrimary Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  events VideoThumbnailEvent[]
}

model VideoThumbnailEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  videoThumbnail   VideoThumbnail @relation(fields: [videoThumbnailId], references: [id])
  videoThumbnailId String

  type    VideoThumbnailEventType
  payload Json
}

enum VideoThumbnailEventType {
  CREATE

  SET_PRIMARY
  UNSET_PRIMARY
}

model VideoTag {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id])

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  isRemoved Boolean @default(false)

  events VideoTagEvent[]

  semitagResolvings SemitagChecking[]

  @@unique([videoId, tagId])
}

model VideoTagEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  videoTag   VideoTag @relation(fields: [videoTagId], references: [id])
  videoTagId String

  type    VideoTagEventType
  payload Json
}

enum VideoTagEventType {
  ATTACH

  DETACH
  REATTACH
}

model Semitag {
  id String @id @default(cuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  isChecked Boolean
  checking  SemitagChecking?

  events SemitagEvent[]
}

model SemitagChecking {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  note String?

  semitag   Semitag @relation(fields: [semitagId], references: [id])
  semitagId String  @unique

  videoTag   VideoTag? @relation(fields: [videoTagId], references: [id])
  videoTagId String?
}

model SemitagEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  semitag   Semitag @relation(fields: [semitagId], references: [id])
  semitagId String

  type    SemitagEventType
  payload Json
}

enum SemitagEventType {
  ATTACH

  RESOLVE
  REJECT
}

model NicovideoVideoSource {
  id String @id @default(cuid())

  sourceId String @unique @db.Citext

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  events NicovideoVideoSourceEvent[]

  @@unique([sourceId, videoId])
}

model NicovideoVideoSourceEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  source   NicovideoVideoSource @relation(fields: [sourceId], references: [id])
  sourceId String

  type    NicovideoVideoSourceEventType
  payload Json
}

enum NicovideoVideoSourceEventType {
  CREATE
}

model NicovideoRegistrationRequest {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  requestedBy   User   @relation(fields: [requestedById], references: [id])
  requestedById String

  sourceId String @unique

  title        String
  thumbnailUrl String
  taggings     NicovideoRegistrationRequestTagging[]
  semitaggings NicovideoRegistrationRequestSemitagging[]

  isChecked Boolean
  checking  NicovideoRegistrationRequestChecking?

  events NicovideoRegistrationRequestEvent[]
}

model NicovideoRegistrationRequestTagging {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  request   NicovideoRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  note String?
}

model NicovideoRegistrationRequestSemitagging {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  request   NicovideoRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String

  name String

  note String?
}

model NicovideoRegistrationRequestChecking {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  checkedBy   User   @relation(fields: [checkedById], references: [id])
  checkedById String

  request   NicovideoRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String                       @unique

  video   Video?  @relation(fields: [videoId], references: [id])
  videoId String?

  note String?
}

model NicovideoRegistrationRequestEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  request   NicovideoRegistrationRequest @relation(fields: [requestId], references: [id])
  requestId String

  type    NicovideoRegistrationRequestEventType
  payload Json?
}

enum NicovideoRegistrationRequestEventType {
  REQUEST

  ACCEPT
  REJECT
}

model YoutubeVideoSource {
  id String @id @default(cuid())

  sourceId String @unique @db.Citext

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  events YoutubeVideoSourceEvent[]

  @@unique([sourceId, videoId])
}

model YoutubeVideoSourceEvent {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  source   YoutubeVideoSource @relation(fields: [sourceId], references: [id])
  sourceId String

  type    YoutubeVideoSourceEventType
  payload Json
}

enum YoutubeVideoSourceEventType {
  CREATE
}

model Notification {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  notifyTo   User   @relation(fields: [notifyToId], references: [id])
  notifyToId String

  isWatched Boolean @default(false) @map("watched")

  type    NotificationType
  payload Json
}

enum NotificationType {
  ACCEPTING_NICOVIDEO_REGISTRATION_REQUEST
  REJECTING_NICOVIDEO_REGISTRATION_REQUEST
}
