scalar DateTime

type Query {
  video(id: ID!): Video!
  tag(id: ID!): Tag!

  searchVideos(
    query: String!
    limit: Int! = 10
    skip: Int! = 0
  ): SearchVideosResult!
  searchTags(
    query: String!
    limit: Int! = 10
    skip: Int! = 0
  ): SearchTagsResult!

  user(name: String!): User!
  whoami: User!
}

type Mutation {
  signin(input: SigninInput): SigninPayload!

  registerTag(input: RegisterTagInput!): RegisterTagPayload!
  registerVideo(input: RegisterVideoInput!): RegisterVideoPayload!
}

input SigninInput {
  name: String!
  password: String!
}

type Video {
  id: ID!
  title: String!
  titles: [VideoTitle!]!
  thumbnailUrl: String!
  thumbnails: [VideoThumbnail!]!
  tags: [Tag!]!
  history: [VideoHistoryItem!]!
}

type VideoTitle {
  title: String!
  primary: Boolean!
}

type VideoThumbnail {
  imageUrl: String!
  primary: Boolean!
}

interface VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
}

type VideoRegisterHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
}

type VideoAddTagHistoryItem implements VideoHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
  video: Video!
  tag: Tag!
}

type Tag {
  id: ID!
  type: TagType!
  name: String!
  names: [TagName!]!
  taggedVideos: [Video!]!
  history: [TagHistoryItem!]!
}

type TagName {
  name: String!
  primary: Boolean!
}

enum TagType {
  COPYRIGHT
  MATERIAL
  MUSIC
  SERIES
  IMAGE
  TACTICS
  CLASS
  EVENT
}

interface TagHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
}

type TagRegisterHistoryItem implements TagHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
}

type SearchVideosResult {
  # count: Int!
  result: [SearchVideosResultItem!]!
}

type SearchVideosResultItem {
  matchedTitle: String!
  video: Video!
}

type SearchTagsResult {
  # count: Int!
  result: [SearchTagsResultItem!]!
}

type SearchTagsResultItem {
  matchedName: String!
  tag: Tag!
}

type User {
  id: ID!
  name: String!
  displayName: String!
  icon: String!
}

type SigninPayload {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input RegisterTagInput {
  primaryName: String!
  extraNames: [String!]
  type: TagType!
}

type RegisterTagPayload {
  tag: Tag!
}

input RegisterVideoInput {
  primaryTitle: String!
  extraTitles: [String!]
  tags: [ID!]!
  primaryThumbnail: String!
}

type RegisterVideoPayload {
  video: Video!
}
