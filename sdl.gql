scalar DateTime

type Query {
  video(id: ID!): Video!
  tag(id: ID!): Tag!

  searchVideos(
    query: String!
    limit: Int! = 10
    skip: Int! = 0
  ): SearchVideosResult!
  searchTags(
    query: String!
    limit: Int! = 10
    skip: Int! = 0
  ): SearchTagsResult!

  user(name: String!): User!
  whoami: User!
}

type Mutation {
  signin(name: String!, password: String!): SigninPayload!

  addTag(input: AddTagInput!): AddTagPayload!
}

type Video {
  id: ID!
  titles: [VideoTitle]!
  title: String!
  tags: [Tag!]!
}

type VideoTitle {
  title: String!
  primary: Boolean!
}

type Tag {
  id: ID!
  type: TagType!
  name: String!
  names: [TagName!]!
  taggedVideos: [Video!]!
  history: [TagHistoryItem!]!
}

type TagName {
  name: String!
  primary: Boolean!
}

enum TagType {
  COPYRIGHT
  MATERIAL
  MUSIC
  SERIES
  IMAGE
  TACTICS
  CLASS
  EVENT
}

interface TagHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
}

type TagRegisterHistoryItem implements TagHistoryItem {
  id: ID!
  user: User!
  createdAt: DateTime!
}

type SearchVideosResult {
  # count: Int!
  result: [SearchVideosResultItem!]!
}

type SearchVideosResultItem {
  matchedTitle: String!
  video: Video!
}

type SearchTagsResult {
  # count: Int!
  result: [SearchTagsResultItem!]!
}

type SearchTagsResultItem {
  matchedName: String!
  tag: Tag!
}

type User {
  id: ID!
  name: String!
  displayName: String!
}

type SigninPayload {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input AddTagInput {
  primaryName: String!
  extraNames: [String!]
  type: TagType!
}

type AddTagPayload {
  tag: Tag!
}
